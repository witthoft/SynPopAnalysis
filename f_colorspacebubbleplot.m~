function f_colorspacebubbleplot(matches, roundvec, dataname,scalefactor,circparam)

% makes a 3d bubbplot of showing the proportion of matches for synesthesia
% data at each point in rgb space.  does it for all matches and each letter
% matches are nx26x3 matrix of matches
% binning bins the rgb space into managable size
% dataname puts a name on the figure and could be used for saving




% this is always handy for labelling not sure if used
letters = {'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z'};






% counts of letters in each rounded 3d bin across all letters
% this is what will be passed to bubbleplot once we fill it
allletterhists = [];

% rounded rgb values for color matches.  basically rounded into the nearest
% bin
allroundedclrs = [];

% counter to keep track of where we are in the loop
clrctr = 1;

% for each letter in matches get the number of matches for 
for i=1:size(matches,2)
%     matches for all subjects for letter i
    clrs = squeeze(matches(:,i,:));
   
    % use downloaded function roundtowardvec
%     rounds each rgb coordinate to nearest location in roundvec
% 
    roundedclrs = roundtowardvec(clrs,roundvec);

    
%     round all colors to the nearest point in the smoothed space
% basically concatenate rounded colors across letters ino a single rgb
% matrix  

    allroundedclrs = [allroundedclrs; roundedclrs];
    
    
    
    
    
%     
    
    counter=1;
    
%     matrix to hold the number of matches at each point in our smoothed
%     space  seems like this could have been done just once but ....
%   bplotmatrix is xyz (rgb) and then the count of matches for each
%   coordinate
%   set that matrix to zeros
    bplotmatrix = zeros(length(roundvec)^3,4);
    
%     for each point on red dimension
    for a=1:length(roundvec)
%         for each point on green dimension
        for b=1:length(roundvec)
%             for each point on blue dimension
            for c=1:length(roundvec)
               
%                 fill that point in the 3d matrix with the number of color
%                 matches found with that value

                bplotmatrix(counter,:) = [roundvec(a) roundvec(b) roundvec(c) ...
                    sum(ismember(roundedclrs, [roundvec(a) roundvec(b) roundvec(c)],...
                    'rows'))];
%                 bplotmatrix is of size length(roundvec)^3 x 4.  the first
%                 3 columns are the 3d coordinates and the fourth column is
%                 the count of matches rounded to the coordinate in that
%                 row.  in this case the bplot matrix is for a single
%                 letter
%             
                counter=counter+1;
            end
        end
    end
   
    

%     for reasons which are puzzling to me we are building up
%     allletterhists by summing the bubbleplotmatrix across each letter.  I
%     think we could have once?  anyway

% on the first pass
    if i==1
%         get the coordinates and first set of counts
        allletterhists = bplotmatrix;
    else
%         just add new counts to fourth column
        allletterhists(:,4) = allletterhists(:,4)+bplotmatrix(:,4);
    end
    
    
end

% at the end of this we have allletterhists which is r g b count x roundvec
% length


% sizes is just the count for each rgb coordinate.  not sure why I pulled
% it out and made it its own variable.  maybe shorter to write?
sizes=allletterhists(:,4);

% need to get rid of zeros
p = find(sizes~=0);

% there are two scaling problems

% the first is setting the size of the bubbles so that for whatever binning
% of the space we use (that is how finely we chop up RGB) our bubbles will
% not be so big they overlap with all the others or so small we can't see
% them.  this is handeled by the variable scale factor which is passed to
% this function

% the second is scaling the bubbles so that the size differences relative
% to say uniform can be reasonably understood.  for example if the matches
% were random uniform distributed, than each bubble would have let's say a
% circumference of 1 (bubble plot sizes the bubbles by treating the
% count as setting the radius).  but I think what the eye sees is
% the area of the circle.  suppose we want to make it so the area goes up
% linearly with the count.  
% the easiest way is to say our counts are areas and then find the
% corresponding circumference for each area and pass that to bubbleplot

% area = C^2/(4pi) so 
% sqrt(4piA)=C

% probably should turn this into a switch

switch(circparam)
    case('radius')
        %         do nothing
    case('area')
        % linear with area
        sizes = sqrt(sizes*pi);
    case('diameter')
        % linear with diameter
        sizes = sizes*2
end
% allletterhists(:,4) = sqrt(allletterhists(:,4)*4*pi);
% fucker moved this to sizes

% default is linear with circumference



% linear with volume







figure('name',['distribution across rgb space for ' dataname],'Color',[1 1 1], 'Position',get(0,'ScreenSize'));

subplot(1,2,1);

%     BUBBLEPLOT3(x,y,z,r,c), where c is a rgb-triplet array (in [0,1])
%     with numel(x) rows, plots bubbles with colours specified by c.

% BUBBLEPLOT3(allletterhists(p,1)',allletterhists(p,2)',allletterhists(p,3)
% ',10*(sizes(p)/sum(sizes))',allletterhists(p,1:3));

bubbleplot3(allletterhists(p,1)',allletterhists(p,2)',allletterhists(p,3)',scalefactor*(sizes(p)/sum(sizes(p)))',allletterhists(p,1:3));

axis equal;
% values range from 1 to 1898
% try using log scaling
% this works but hard to see pattern
% BUBBLEPLOT3(allletterhists(p,1)',allletterhists(p,2)',allletterhists(p,3)',(log(s(p))/(10*max(log(s(p)))))',allletterhists(p,1:3));


% scatter3(roundedclrs(:,1),roundedclrs(:,i,2),roundedclrs(:,i,3))


xlabel('Red');ylabel('Green');zlabel('Blue');
title('data distribution');





% pair it with a uniform distribution
% figure('name',['uniform distribution across rgb space'],'Color',[1 1 1]);

subplot(1,2,2);

% total number of matches
numletterswithmatches = sum(sizes(p));
% number for each point
u = numletterswithmatches/(length(roundvec)^3);

 bplotmatrix(:,4) = u;

bubbleplot3(bplotmatrix(:,1)',bplotmatrix(:,2)',bplotmatrix(:,3)',(scalefactor*bplotmatrix(:,4)/numletterswithmatches)',bplotmatrix(:,1:3));
xlabel('Red');ylabel('Green');zlabel('Blue');
set(gca,'Xlim',[0 1],'YLim',[0 1],'ZLim',[0 1]);

axis equal

title('uniform distribution');







% let's plot the same thing, but in L*a*b* coordinates

% first we havt to get the RGB coords to Lab

[Lum adim bdim] = RGB2Lab(allletterhists(:,1),allletterhists(:,2),allletterhists(:,3));

% put them into the same representation we have been using
Laballletterhists =[Lum adim bdim allletterhists(:,4)];

figure('name',['distribution across L*a*b* space for ' dataname],'Color',[1 1 1], 'Position',get(0,'ScreenSize'));

subplot(1,2,1);

%     BUBBLEPLOT3(x,y,z,r,c), where c is a rgb-triplet array (in [0,1])
%     with numel(x) rows, plots bubbles with colours specified by c.

% BUBBLEPLOT3(allletterhists(p,1)',allletterhists(p,2)',allletterhists(p,3)
% ',10*(sizes(p)/sum(sizes))',allletterhists(p,1:3));

h1=bubbleplot3(Laballletterhists(p,2)',Laballletterhists(p,3)',Laballletterhists(p,1)',75*scalefactor*(sizes(p)/sum(sizes(p)))',allletterhists(p,1:3));

ha1=get(gca);


xlabel('a*');ylabel('b*');zlabel('L*');
title('data distribution');


% pair it with a uniform distribution
% figure('name',['uniform distribution across rgb space'],'Color',[1 1 1]);

subplot(1,2,2);

% total number of matches
numletterswithmatches = sum(sizes(p));
% number for each point
u = numletterswithmatches/(length(roundvec)^3);

 bplotmatrix(:,4) = u;

h2=bubbleplot3(Laballletterhists(p,2)',Laballletterhists(p,3)',Laballletterhists(p,1)',75*(scalefactor*bplotmatrix(:,4)/numletterswithmatches)',bplotmatrix(:,1:3));
xlabel('a*');ylabel('b*');zlabel('L*');


title('uniform distribution');

% for rotation
% rotate(h,direction,alpha)
% direction = [1 0 0];
% View the object from directly overhead.
% 
% az = 0;
% el = 90;
% view(az, el);

% this works pretty well.  but maybe what we can do is just divide the Lab
% cube up and then recalculate the number at each point.  its a little
% weird because when we color the dots we have to get the relevant RGB
% value and it may be out of gamut.


% take all the color matches and transform to Lab coordinates
% matches is 6188 x 26 x 3 so
LabMatches = matches;


% convert to LAB so this matrix is subjects x Lab
[LabMatches(:,:,1) LabMatches(:,:,2) LabMatches(:,:,3)] = RGB2Lab(matches(:,:,1),matches(:,:,2), matches(:,:,3));


% % 
% hard code the rounding matrix for now

% Lstar = linspace(0,100,5);
% astar = linspace(-60,60,5);%this one is weird because you need to catch the greyscale values at a=b=0
% bstar = astar;


% general formula
% pick number of ab bins 
numabbins = 8;

% assuming symmetry around 0 any even choice of bins will be ok
abbins = linspace(-64,64,numabbins+2);
% this will give you the edges of your bins
% get half the size of the bins
% dist to center
dist2cntr = abs(abbins(1)-abbins(2))/2;
% add this to every value in bins except last one..not sure we need
% rounding
astar = round(abbins(1:end-1)+dist2cntr);
bstar=astar;

% pick number of L bins
numLbins = 8;
Lbins = linspace(0,100,numLbins+2);
dist2cntr = abs(Lbins(1)-Lbins(2))/2;
Lstar = round(Lbins(1:end-1)+dist2cntr);



% number of coordinates is space
numcoords = length(Lstar)*length(astar)*length(bstar);


% let's do the rounding
roundedLabMatches = LabMatches;

roundedLabMatches(:,:,1)=roundtowardvec(LabMatches(:,:,1),Lstar,'round');
roundedLabMatches(:,:,2)=roundtowardvec(LabMatches(:,:,2),astar,'round');
roundedLabMatches(:,:,3)=roundtowardvec(LabMatches(:,:,3),bstar,'round');

% the index of the value in Lstar astar bstar is the gives the xyz
% coordinate

labplotmatrix = zeros(length(Lstar),length(astar),length(bstar));

% but for bubble plot need numcoords*4 which is x y z value color
labbubblematrix=zeros(numcoords,4);

% will also need a color for each coordinate
labbubblecolors = zeros(numcoords,3);



% let's make a single Lab vector
rlmvector = reshape(roundedLabMatches,size(roundedLabMatches,1)*size(roundedLabMatches,2),3);

% counter for indexing bubble plot matrix
counter =1;
% probably could have done this in a single step but thinking....
for L=1:length(Lstar)
    for a=1:length(astar)
        for b=1:length(bstar)
            %          find elements with that index
            labplotmatrix(L,a,b)=sum(ismember(rlmvector,[Lstar(L),astar(a),bstar(b)],'rows'));
            labbubblematrix(counter,:)=[Lstar(L) astar(a) bstar(b) ...
                sum(ismember(rlmvector,[Lstar(L),astar(a),bstar(b)],'rows'))];
            %         if there were any matches at this coordinate add an rgb color
            if labbubblematrix(counter,4)~=0
                labbubblecolors(counter,:)=Lab2RGB(Lstar(L),astar(a),bstar(b));
            end
            counter=counter+1;
        end
        
    end
end


% scale the bubbles so that the size visually reflects proportion


switch(circparam)
    case('radius')
        %         do nothing
    case('area')
        % linear with area
        labbubblematrix(:,4) = sqrt(labbubblematrix(:,4)*pi);
    case('diameter')
        % linear with diameter
        labbubblematrix(:,4) = labbubblematrix(:,4)*2
end



figure;

% then make the bubble plot
% bubbleplot3(labbubblematrix(:,1),labbubblematrix(:,2),...
%     labbubblematrix(:,3),labbubblematrix(:,4)/10,labbubblecolors/255);
% xlabel('L*');ylabel('a*');zlabel('b*');

% actual distribution
subplot(1,2,1);

bubbleplot3(labbubblematrix(:,2),labbubblematrix(:,3),...
    labbubblematrix(:,1),labbubblematrix(:,4)/10,labbubblecolors/255);

xlabel('a*');ylabel('b*');zlabel('L*');
% 
% set(gca,'XTickLabel',Lstar,'YTickLabel',astar,'ZTickLabel',bstar)


% uniform distribution
% this is a little tricky since we don't exactly know how many coordinates
% in Lab space there are since it is not really a cube.  as a trick we can
% just find every coordinate that was assigned a color, and then give each
% coordinate an equal number of matches.

% find index and number of coordinates with matches
hasmatches = find(labbubblematrix(:,4)~=0);

% set uniform bubblesize total matches/numcoords
ububblesize = sum(labbubblematrix(:,4))/length(hasmatches);

subplot(1,2,2);



bubbleplot3(labbubblematrix(hasmatches,2),labbubblematrix(hasmatches,3),...
    labbubblematrix(hasmatches,1),(ububblesize/10)*ones(length(hasmatches),1),labbubblecolors(hasmatches,:)/255);

xlabel('a*');ylabel('b*');zlabel('L*');











end






%     BUBBLEPLOT3(x,y,z,r), where x, y, z and r are four vectors of the
%     same length, plots bubbles of radii r in 3-space with centers at
%     the points whose coordinates are the elements of x, y and z. If r
%     is a matrix of size numel(x)x3, BUBBLEPLOT3 produces ellipsoids with
%     centers x(i),y(i),z(i) and radii r(i,1), r(i,2) and r(i,3).
%
%     BUBBLEPLOT3(x,y,z,r,c), where c is a rgb-triplet array (in [0,1])
%     with numel(x) rows, plots bubbles with colours specified by c.





% % create the bins.  add 2 to get edges
% roundbins = linspace(0,1,nbins+2);
% % now find the bin centers.  these will be half the bin size subtracted
% % from each bin that is not an edge
% roundvec = roundbins(2:end)-roundbins(2)/2;





% round to nearest Lab Coordinate

% only display Lab Coordinates with value greater than 0 to avoid out of
% gamut problems

% record which coordinates those are to make uniform comparison











