% fp_visualizeShuffledEagDB.m

% script which visualizes various ways of shuffling the eagleman data

% assumes you have this output from s_fpRichAndEaglemanMatches.m

% rgb = 
% 
%                  eagle: [6588x3x26 double]
%     eagleShuffledByRow: [6588x3x26 double]
%     eagleShuffledByCol: [6588x3x26 double]
%                magnets: [6588x3x26 double]


% permute rgb.



% now we can look at the whole data set and shuffled versions
%   the best move for visualization seems to be to assign random values to
%   those values which are NaNs. 






figure('name', 'all matches in eagleman database', 'Color', [1 1 1],'Position',get(0,'ScreenSize'));
subplot(1,3,1);
% get index to nans
indx =find(isnan(rgb.eagle));
% make a random rgb matrix of length index ,3 
randcolors = rand(length(indx),1);
temp=rgb.eagle;
% fill in the nans with random colors
temp(indx) =randcolors;
imagesc(permute(temp,[1,3,2]));
ylabel('SUBJECTS');
xlabel('LETTERS');
set(gca,'XTick',[1:26],'XTickLabel',letters, 'TickDir','out', 'YDir','normal');
box off;
title('All letter-color matches in eagleman database');

subplot(1,3,2);
% get index to nans
indx =find(isnan(rgb.eagleShuffledByRow));
% make a random rgb matrix of length index ,3 
randcolors = rand(length(indx),1);
temp=rgb.eagleShuffledByRow;
% fill in the nans with random colors
temp(indx) =randcolors;
imagesc(permute(temp,[1,3,2]));
% imagesc(permute(rgb.eagleShuffledByRow,[1,3,2]));
ylabel('SUBJECTS');
xlabel('LETTERS');
set(gca,'XTick',[1:26],'XTickLabel',letters, 'TickDir','out', 'YDir','normal');
box off;
title('Shuffled by Row');

subplot(1,3,3);
% get index to nans
indx =find(isnan(rgb.eagleShuffledByCol));
% make a random rgb matrix of length index ,3 
randcolors = rand(length(indx),1);
temp=rgb.eagleShuffledByCol;
% fill in the nans with random colors
temp(indx) =randcolors;
imagesc(permute(temp,[1,3,2]));
% imagesc(permute(rgb.eagleShuffledByCol,[1,3,2]));
ylabel('SUBJECTS');
xlabel('LETTERS');
set(gca,'XTick',[1:26],'XTickLabel',letters, 'TickDir','out', 'YDir','normal');
box off;
title('Shuffled by Column');

saveas(gcf,'databasevisualizations/AllMatchesRowShuffColShuffle.png','png');
plot2svg('databasevisualizations/AllMatchesRowShuffColShuffle.

% 
% % can see some cool stuff already.  for example there are numerous letters
% % which seem to be strongly associated with colors overall.
% %  A : RED
% %  B : BLUE
% %  C : YELLOW
% %  D : DARK?
% %  G : GREEN?
% %  H : PINK/ORANGE?
% %  I : WHITE
% %  L : LIGHT?
% %  O : WHITE
% %  P : PINK/PURPLE?
% %  R : RED
% %  S : YELLOW?
% %  X : BLACK
% %  Y : YELLOW
% 
% 
% % what we would like to see is the histograms across subjects for each
% % letter.  one way would be to convert each rgb value to hsv and then do
% % the histogram around the hue circle.  this is on the to do list.
% % unfortunately it rules out the white letters
% 
% % 
% % % a second way is to plot the points on 3d plots where the axes are r,g,
% % % and b, and look at if and how they cluster.
% % % for each letter make a plot (later to be closed and saved as figures)
% % i=11;
% % % for i=1:1
% % figure('name', ['matches for letter : ', labels(i)], 'Color', [1 1 1]);
% % % what would be awesome would be to color each point by its rgb value
% % clrs = squeeze(p_rgb(:,i,:));
% % scatter3(p_rgb(:,i,1),p_rgb(:,i,2),p_rgb(:,i,3),20,clrs);
% % xlabel('Red');ylabel('Green');zlabel('Blue');
% % box off;
% % 
% % % end
% % 
% % 
% % 
% % % or we could plot every point in the data set just to see if it uniformly
% % % covers the space (which it doesn't)
% % figure('name','all colors generated in eagleman set across letters','Color',[1 1 1]);
% % for i=1:26
% %     clrs = squeeze(p_rgb(:,i,:));
% %     scatter3(p_rgb(:,i,1),p_rgb(:,i,2),p_rgb(:,i,3),20,clrs);
% %     hold on;
% % end
% % xlabel('Red');ylabel('Green');zlabel('Blue');
% % box off;
% % 
% 
% 
% %  a third way is to convert each of the rgb values to a label and then compute
% % make some histograms showing counts or proportions in each bin
% % first we need to convert our rgbs to color labels.  At this point the
% % conversion is done by lookup table.  the lookup table was generated by
% % manually labelling thousands of colors (a grid that overlays the rgb
% % space).  we interpolate to the nearest point to get the color.  at the
% % moment this lookup seems to be 90-95% accurate so it could be better.
% % that set of labels is called lRGBnathan.mat
% 
% % let's make our labeled database
% % this function takes the rgb colors and converts them to numerical labels
% % and converted to color names
% [dbNumbered dbLabeled] = fpRGB2ColorsJW(rgb);
% 
% 
% %   dbLabeled            6588x26                11947850  cell
% %   dbNumbered           6588x26                 1370304  double
% % the lookup table for numbers to names is
% 
% names = {...
%     'black' ...
%     'white' ...
%     'red' ...
%     'green' ...
%     'yellow' ...
%     'blue' ...
%     'brown' ...
%     'purple' ...
%     'pink' ...
%     'orange' ...
%     'grey'...
%     };
% 
% histcolors = [ 0 0 0;
%     1 1 1;
%     1 0 0;
%     0 1 0;
%     1 1 0;
%     0 0 1;
%     .8 .4 .12;
%     .8 0 .8;
%     1 .1 .55;
%     1 .6 0;
%     .5 .5 .5;];
% 
% % 
% % 
% % 
% % % ok:  now we want some histograms
% % % since we want to color each bar in the right color can't really use the
% % % hist function
% % figure('name','histogram of color names for each letter ', 'Color', [1 1 1]);
% % for i = 1:26
% %     
% %     subplot(6,5,i);
% %     [counts, bins]=hist(dbNumbered(:,i),11)
% %     hBar =bar(bins, counts,'hist');
% %     ylabel('Number of Subjects');
% %     %    set(gca,'XTick',[0:length(names)],'XTickLabel',names,'YLim',[0
% %     %    3000],'FontSize',6);
% %     set(gca,'YLim',[0 3000],'FontWeight','bold');
% %     set(hBar,'FaceVertexCData',histcolors);
% %     title(labels(i));
% %     box off;
% %     
% % end
% 
% 
% % let's do it again as percent
% figure('name','percent of times each letter is given a color label', 'Color', [1 1 1]);
% for i = 1:26
%     
%     subplot(6,5,i);
%     [counts, bins]=hist(dbNumbered(:,i),11)
%     counts  = counts/length(dbLabeled);
%     hBar =bar(bins, counts,'hist');
%     ylabel('Number of Subjects');
%     %    set(gca,'XTick',[0:length(names)],'XTickLabel',names,'YLim',[0
%     %    3000],'FontSize',6);
%     set(gca,'YLim',[0 .6],'FontWeight','bold');
%     set(hBar,'FaceVertexCData',histcolors);
%     title(labels(i));
%     box off;
%     
% end

% 
% 
% format short g;
% 
% % want to slip a table in here too in the command window
% disp(['letter  black  white  red    green  yellow blue   brown  purple pink   orange grey']);
% for i=1:26
%     [counts, bins]=hist(dbNumbered(:,i),11);
%     counts  = counts/length(dbLabeled);
%     disp([letters(i) '       ' num2str(counts,'%0.2f   ')]);
%     
% end

% would also like to convert the rgb to hsv.  matlab has a function for
% this, which I find absolutely never works correctly.  one problem is that
% the data contains some nans

% can see some cool stuff already.  for example there are numerous letters
% which seem to be strongly associated with colors overall.
%  A : RED
%  B : BLUE
%  C : YELLOW
%  D : DARK?
%  G : GREEN?
%  H : PINK/ORANGE?
%  I : WHITE
%  L : LIGHT?
%  O : WHITE
%  P : PINK/PURPLE?
%  R : RED
%  S : YELLOW?
%  X : BLACK
%  Y : YELLOW



% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
%
%   this section plots all the matches for each letter on 3d plots where
%   the axes are rgb.  as this is a lot of points these figures are slow to
%   make and adjust.
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %


% % what we would like to see is the histograms across subjects for each
% % letter.  one way would be to convert each rgb value to hsv and then do
% % the histogram around the hue circle.  this is on the to do list.
% % unfortunately it rules out the white letters
%
%
% % a second way is to plot the points on 3d plots where the axes are r,g,
% % and b, and look at if and how they cluster.
% % for each letter make a plot (later to be closed and saved as figures)
% i=11;
% % for i=1:1
% figure('name', ['matches for letter : ', labels(i)], 'Color', [1 1 1]);
% % what would be awesome would be to color each point by its rgb value
% clrs = squeeze(p_rgb(:,i,:));
% scatter3(p_rgb(:,i,1),p_rgb(:,i,2),p_rgb(:,i,3),20,clrs);
% xlabel('Red');ylabel('Green');zlabel('Blue');
% box off;
%
% % end
%
%
%
% % or we could plot every point in the data set just to see if it uniformly
% % covers the space (which it doesn't)
% figure('name','all colors generated in eagleman set across letters','Color',[1 1 1]);
% for i=1:26
%     clrs = squeeze(p_rgb(:,i,:));
%     scatter3(p_rgb(:,i,1),p_rgb(:,i,2),p_rgb(:,i,3),20,clrs);
%     hold on;
% end
% xlabel('Red');ylabel('Green');zlabel('Blue');
% box off;


